#!/usr/bin/env node
"use strict";

var _asdfjkl = _interopRequireWildcard(require("./asdfjkl"));

var _commander = _interopRequireDefault(require("commander"));

var _package = _interopRequireDefault(require("../package.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

_commander["default"].version(_package["default"].version).option('-T, --train [fileName]', 'Train the model with your own file').option('-t, --try <text>', 'Text to try Asdfjkl').parse(process.argv);

if (!_commander["default"].train && !_commander["default"]["try"]) _commander["default"].help();

if (_commander["default"].train) {
  var flagOrFileName = _commander["default"].train;
  flagOrFileName === true ? (0, _asdfjkl.train)() : (0, _asdfjkl.train)(flagOrFileName);
}

if (_commander["default"]["try"]) {
  var text = _commander["default"]["try"];
  var result = (0, _asdfjkl["default"])(text);
  console.log("Result for \"".concat(text, "\": ").concat(result));
}